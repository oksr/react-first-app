{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/navbar/navbar-item/nav-item.component.jsx","components/navbar/navbar.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","NavItem","NavBar","state","nav_items","this","navitems","Component","Search","placeholder","handleChange","type","onChange","App","searchField","fetch","then","response","json","users","setState","filterMonsters","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2VAGaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCHbC,G,MAAW,SAACR,GACrB,OAAQ,yBAAKC,UAAU,aAEfD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,UCLnCQ,G,MAAU,SAACZ,GAAD,OACnB,yBAAKC,UAAU,YACX,2BAAID,EAAMM,SCDZO,G,wDACF,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTC,UAAW,CACP,CACIT,KAAM,OACND,GAAI,OAER,CACIC,KAAM,QACND,GAAI,OAER,CACIC,KAAM,WACND,GAAI,OAER,CACIC,KAAM,OACND,GAAI,SAnBN,E,qDAyBV,OAEI,yBAAKJ,UAAU,kBAEPe,KAAKF,MAAMC,UAAUL,KAAI,SAAAO,GAAQ,OAC7B,kBAAC,EAAD,CAASN,IAAKM,EAASZ,GAAIC,KAAMW,EAASX,e,GA/B7CY,cCDRC,G,MAAS,SAAC,GAAD,EAAGC,YAAH,IAAgBC,EAAhB,EAAgBA,aAAhB,OAClB,2BACIC,KAAK,SACLrB,UAAU,SACVmB,YAAY,kBACZG,SAAUF,MC8BHG,G,wDA9Bb,aAAe,IAAD,8BACZ,gBAEKV,MAAQ,CACXL,SAAU,GACVgB,YAAa,IALH,E,gEASM,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACtB,SAAUqB,S,+BAGhC,IAAD,SAC0Bd,KAAKF,MAA/BL,EADA,EACAA,SAAUgB,EADV,EACUA,YACXO,EAAiBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC5CA,EAAQE,KAAK4B,cAAcC,SAASV,EAAYS,kBAElD,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQoB,aAAc,SAAAe,GAAC,OAAI,EAAKL,SAAS,CAACN,YAAaW,EAAEC,OAAOC,SAASlB,YAAY,oBACrF,kBAAC,EAAD,CAAUX,SAAUuB,S,GAzBVd,cCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a99ba3c7.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}/>\n        <h1>{props.monster.name}</h1>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './card-list.style.css';\n\nexport const CardList = (props) => {\n    return (<div className='card-list'>\n        {\n            props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster}/>\n            ))\n        }\n    </div>);\n};","import React from 'react';\nimport './nav-item.style.css';\n\nexport const NavItem = (props) => (\n    <div className='nav-item'>\n        <p>{props.name}</p>\n    </div>\n)","import React, { Component } from 'react';\nimport { NavItem } from '../navbar/navbar-item/nav-item.component';\nimport './navbar.style.css';\n\nclass NavBar extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            nav_items: [\n                {\n                    name: 'Home',\n                    id: 'h12'\n                },\n                {\n                    name: 'About',\n                    id: 'a12'\n                },\n                {\n                    name: 'See More',\n                    id: 's12'\n                },\n                {\n                    name: 'Demo',\n                    id: 'd12'\n                },\n            ]\n        }\n    }\n    render() {\n        return (\n            \n            <div className='navbar-wrapper'>\n                {\n                    this.state.nav_items.map(navitems => (\n                        <NavItem key={navitems.id} name={navitems.name}/>\n                    ))\n                }\n            </div>\n        )\n    }\n}\nexport { NavBar };","import React from 'react';\nimport './search-box.styles.css';\n\nexport const Search = ({ placeholder, handleChange }) => (\n    <input \n        type='search'\n        className='search'\n        placeholder='Search Monsters'\n        onChange={handleChange}\n        />\n);","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\n// import {NavBar} from './components/navbar/navbar.component';\nimport {NavBar} from './components/navbar/navbar.component';\nimport {Search} from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n  \n  render() {\n    const {monsters, searchField } = this.state; \n    const filterMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return (\n      <div className='App'>\n        <NavBar/>\n        <Search handleChange={e => this.setState({searchField: e.target.value})} placeholder='Search Monsters'/>\n        <CardList monsters={filterMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}